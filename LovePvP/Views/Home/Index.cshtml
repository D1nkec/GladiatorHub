@using GladiatorHub.Models
@model List<PlayableClass>

@{
    ViewData["Title"] = "Home Page";
}

<div class="container mt-4">
    <!-- Search Form -->
    <h1 class="text-center">Search for a Player</h1>
    <div class="search-container mb-5">
        <form method="get" asp-controller="Player" asp-action="PvpSummary" class="needs-validation" novalidate>
            <div class="mb-3">
                <label for="characterName" class="form-label">Character Name</label>
                <input type="text" class="form-control" id="characterName" name="characterName" placeholder="Enter character name" required />
            </div>
            <div class="mb-3">
                <label for="realmSlug" class="form-label">Realm Name</label>
                <input type="text" class="form-control" id="realmSlug" name="realmSlug" placeholder="Enter realm name" required />
            </div>
            <button type="submit" class="btn btn-primary w-100">Search</button>
        </form>
    </div>

    <hr />

    <!-- Class Icons -->
    <h2 class="text-center">World of Warcraft Classes</h2>
    <div class="row mt-4">
        @foreach (var playableClass in Model)
        {
            <div class="col-md-3 col-sm-6 text-center class-item mb-4" onclick="toggleSpecializations(@playableClass.Id)">
                <div class="card shadow">
                    <img src="@playableClass.IconUrl" alt="@playableClass.Name Icon" class="card-img-top class-icon" />
                </div>

                <!-- Specializations for this class -->
                <div id="specializations-@playableClass.Id" class="specializations mt-3" style="display: none;">
                    @if (ViewBag.ClassSpecializations != null && ViewBag.ClassSpecializations.ContainsKey(playableClass.Id))
                    {
                        var specializations = ViewBag.ClassSpecializations[playableClass.Id];
                        foreach (var specialization in specializations)
                        {
                            <div class="specialization-item mb-2">
                                <a href="@Url.Action("SoloShuffle", "Leaderboards", new {
                                    klasa = Uri.EscapeDataString(playableClass.Name.ToLower().Replace(" ", "-")),
                                    spec = Uri.EscapeDataString(specialization.Name.ToLower().Replace(" ", "-"))
                                })" class="text-decoration-none">
                                    <img src="@specialization.IconUrl" alt="@specialization.Name Icon" class="specialization-icon" />
                                    <p>@specialization.Name</p>
                                </a>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    </div>

    <h2 class="text-center mt-5">Arena Leaderboards</h2>
    <div class="d-flex justify-content-center">
        <div id="leaderboard-container-2v2" class="m-2">
            @{

                ViewBag.GameMode = "2v2"; 
            }
            @Html.Partial("_LeaderboardPartial", (List<LeaderboardEntry>)ViewBag.Leaderboard2v2)
        </div>
        <div id="leaderboard-container-3v3" class="m-2">
            @{

                ViewBag.GameMode = "3v3"; 
            }
            @Html.Partial("_LeaderboardPartial", (List<LeaderboardEntry>)ViewBag.Leaderboard3v3)
        </div>
        <div id="leaderboard-container-3v3" class="m-2">
            @{

                ViewBag.GameMode = "rbg"; 
            }
            @Html.Partial("_LeaderboardPartial", (List<LeaderboardEntry>)ViewBag.LeaderboardRbg)
        </div>
    </div>


    <script>
        function loadLeaderboard(gameMode, page) {
            $.ajax({
                url: '/Home/FetchLeaderboardDataAsync',
                data: { gameMode: gameMode, page: page },
                type: 'GET',
                success: function (data) {
                    if (gameMode === "2v2") {
                        $('#leaderboard-container-2v2').html(data);
                    } else if (gameMode === "3v3") {
                        $('#leaderboard-container-3v3').html(data)
                        else if (gameMode === "rbg") {
                        $('#leaderboard-container-rbg').html(data);
                    }
                },
                error: function () {
                    console.error("Error loading leaderboard.");
                    alert("Failed to load leaderboard. Please try again.");
                }
            });
        }

        //Ensure leaderboards load on page load
        $(document).ready(function () {
            loadLeaderboard("2v2", 1);
            loadLeaderboard("3v3", 1);
            loadLeaderboard("rbg", 1);
        });
    </script>



   <script>
    function toggleSpecializations(classId) {
        const specDiv = document.getElementById('specializations-' + classId);
        const loadingSpinner = document.getElementById('loading-spinner-' + classId);

        if (specDiv.style.display === 'none' || specDiv.style.display === '') {
            specDiv.style.display = 'block';
            if (loadingSpinner) loadingSpinner.style.display = 'none';
        } else {
            specDiv.style.display = 'none';
            if (loadingSpinner) loadingSpinner.style.display = 'block';
        }
    }
    </script>